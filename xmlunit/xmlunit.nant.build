<project name="xmlunit" description="XmlUnit for .Net" default="compile">
  <property name="project.version" value="2.0" overwrite="false"/>
  <property name="base.dir" value="${project::get-base-directory()}"
    overwrite="false"/>
  <property name="core.src.dir" value="${base.dir}/src/main/net-core" overwrite="false"/>
  <property name="legacy.src.dir" value="${base.dir}/src/main/net-legacy" overwrite="false"/>
  <property name="core.tests.src.dir" value="${base.dir}/src/tests/net-core"
    overwrite="false"/>
  <property name="legacy.tests.src.dir" value="${base.dir}/src/tests/net-legacy"
    overwrite="false"/>

  <property name="build.dir" value="${base.dir}/build/net" overwrite="false"/>
  <property name="bin.dir" value="${build.dir}/bin" overwrite="false"/>

  <property name="csc.verbose" value="false" overwrite="false"/>
  <property name="deploy.file" overwrite="false"
    value="${project::get-name()}-${project.version}.zip"/>
  
  <!-- *** You may need to edit these properties for your filesystem *** -->
  <property name="nunit.v2.assembly" value="nunit.framework.dll"
    overwrite="false"/>
  <property name="nunit.v2.bin.dir" overwrite="false"
    value="lib" />
  
  <target name="init" description="prepare for other targets">
    <mkdir dir="${bin.dir}"/>
    <copy file="${nunit.v2.bin.dir}/${nunit.v2.assembly}"
      tofile="${bin.dir}/${nunit.v2.assembly}"/>
  </target>
  
  <target name="clean" description="clean out compiled files">
    <delete failonerror="false">
      <fileset basedir="${build.dir}"/> 
    </delete>
  </target>
  
  <target name="compile-core"
          description="compile core source files" depends="init">
    <csc target="library" output="${bin.dir}/${project::get-name()}-core.dll"
         debug="true" verbose="${csc.verbose}">
      <sources basedir="${core.src.dir}">
        <include name="**/*.cs"/>
      </sources>
    </csc>
  </target>
    
  <target name="compile" description="compile all source files"
          depends="compile-core">
    <csc target="library" output="${bin.dir}/${project::get-name()}-legacy.dll"
      debug="true" verbose="${csc.verbose}">
      <references basedir="${bin.dir}">
        <include name="${project::get-name()}-core.dll"/>
        <include name="${nunit.v2.assembly}"/>
      </references>
      <sources basedir="${legacy.src.dir}">
        <include name="*.cs"/>
      </sources>
    </csc>
    
    <csc target="library"
      output="${bin.dir}/${project::get-name()}-core.tests.dll"
      debug="true" verbose="${csc.verbose}">
      <references basedir="${bin.dir}">
        <include name="${project::get-name()}-core.dll"/>
        <include name="${nunit.v2.assembly}"/>
      </references>
      <sources basedir="${core.tests.src.dir}">
        <include name="**/*.cs"/>
      </sources>
    </csc>
    <csc target="library"
      output="${bin.dir}/${project::get-name()}-legacy.tests.dll"
      debug="true" verbose="${csc.verbose}">
      <references basedir="${bin.dir}">
        <include name="${project::get-name()}-core.dll"/>
        <include name="${project::get-name()}-legacy.dll"/>
        <include name="${nunit.v2.assembly}"/>
      </references>
      <sources basedir="${legacy.tests.src.dir}">
        <include name="*.cs"/>
        <exclude name="AllTests.cs"/>
      </sources>
    </csc>
  </target>
  
  <target name="test" description="run all tests" depends="compile">
    <nunit2>
      <formatter type="Plain"/>
      <test assemblyname="${bin.dir}/${project::get-name()}-core.tests.dll"/>
      <test assemblyname="${bin.dir}/${project::get-name()}-legacy.tests.dll"/>
    </nunit2>
  </target>
  
  <target name="deploy" description="zip all code for deployment"
    depends="test">
    <delete file="${deploy.file}" failonerror="false"/>
    <zip zipfile="${deploy.file}">
      <fileset basedir="${base.dir}">
        <include name="LICENSE.txt"/> 
        <include name="NUnit.ReadMe"/> 
        <include name="*.build"/>
        <include name="**/*.cs"/>
        <include name="./tests/etc/**/*.*"/>
        <include name="**/${project::get-name()}*.dll"/>
        <exclude name="**/AllTests.cs"/>
      </fileset>
    </zip>
  </target>
  
  <target name="all" description="execute all tasks in the project"
    depends="clean,compile,test,deploy"/>
  
</project>
