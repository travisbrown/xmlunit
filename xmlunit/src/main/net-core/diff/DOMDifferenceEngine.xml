<?xml version="1.0"?>
<!--
  This file is licensed to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<class ns="net.sf.xmlunit.diff" qualifiers="public sealed"
       name="DOMDifferenceEngine"
       summary="Difference engine based on DOM."
       extends="AbstractDifferenceEngine">

  <import reference="System"/>
  <import reference="System.Xml"/>

  <literal><![CDATA[

        public override void Compare(ISource control, ISource test) {
            if (control == null) {
                throw new ArgumentNullException("control");
            }
            if (test == null) {
                throw new ArgumentNullException("test");
            }

            CompareNodes(net.sf.xmlunit.util.Convert.ToNode(control),
                         net.sf.xmlunit.util.Convert.ToNode(test));
        }

        /// <summary>
        /// Recursively compares two XML nodes.
        /// </summary>
        /// <remarks>
        /// Performs comparisons common to all node types, the performs
        /// the node type specific comparisons and finally recures into
        /// the node's child lists.
        ///
        /// Stops as soon as any comparison returns ComparisonResult.CRITICAL.
        /// </remarks>
        internal ComparisonResult CompareNodes(XmlNode control, XmlNode test) {
]]></literal>
  <lastResultDef/>
  <compare type="NODE_TYPE" property="NodeType"/>
  <compare type="NAMESPACE_URI" property="NamespaceURI"/>
  <compare type="NAMESPACE_PREFIX" property="Prefix"/>
  <literal><![CDATA[
            XmlNodeList controlChildren = control.ChildNodes;
            XmlNodeList testChildren = test.ChildNodes;
]]></literal>
  <compareExpr type="CHILD_NODELIST_LENGTH"
               controlExpr="controlChildren.Count"
               testExpr="testChildren.Count"/>
  <compareMethod method="NodeTypeSpecificComparison"/>
  <literal><![CDATA[
            return CompareNodeLists(controlChildren, testChildren);
        }

        /// <summary>
        /// Dispatches to the node type specific comparison if one is
        /// defined for the given combination of nodes.
        /// </summary>
        internal ComparisonResult NodeTypeSpecificComparison(XmlNode control,
                                                             XmlNode test) {
            switch (control.NodeType) {
            case XmlNodeType.CDATA:
            case XmlNodeType.Comment:
            case XmlNodeType.Text:
                if (test is XmlCharacterData) {
                    return CompareCharacterData((XmlCharacterData) control,
                                                (XmlCharacterData) test);
                }
                break;
            case XmlNodeType.Document:
                if (test is XmlDocument) {
                    return CompareDocuments((XmlDocument) control,
                                            (XmlDocument) test);
                }
                break;
            case XmlNodeType.Element:
#if false
                if (test instanceof Element) {
                    return compareElements((Element) control,
                                           (Element) test);
                }
#endif
                break;
            case XmlNodeType.ProcessingInstruction:
                if (test is XmlProcessingInstruction) {
                    return
                        CompareProcessingInstructions((XmlProcessingInstruction) control,
                                                      (XmlProcessingInstruction) test);
                }
                break;
            case XmlNodeType.DocumentType:
                if (test is XmlDocumentType) {
                    return CompareDocTypes((XmlDocumentType) control,
                                           (XmlDocumentType) test);
                }
                break;
            }
            return ComparisonResult.EQUAL;
        }

        /// <summary>
        /// Compares textual content.
        /// </summary>
        private ComparisonResult CompareCharacterData(XmlCharacterData control,
                                                      XmlCharacterData test) {
            return Compare(new Comparison(ComparisonType.TEXT_VALUE, control,
                                          null, control.Data,
                                          test, null, test.Data));
        }

        private ComparisonResult CompareDocuments(XmlDocument control,
                                                  XmlDocument test) {
            XmlDocumentType controlDt = control.DocumentType;
            XmlDocumentType testDt = test.DocumentType;
]]></literal>
  <lastResultDef/>
  <compareExpr type="HAS_DOCTYPE_DECLARATION"
               controlExpr="controlDt != null"
               testExpr="testDt != null"/>
  <literal><![CDATA[
            if (controlDt != null && testDt != null) {
]]></literal>
  <compareMethodExpr method="NodeTypeSpecificComparison"
                     controlExpr="controlDt"
                     testExpr="testDt"/>
  <literal><![CDATA[
            }
]]></literal>
<!--
  <compare type="XML_VERSION" property="getXmlVersion()"/>
  <compare type="XML_STANDALONE" property="getXmlStandalone()"/>
  <literal><![CDATA[
            return Compare(new Comparison(ComparisonType.XML_ENCODING,
                                          control, null, control.getXmlEncoding(),
                                          test, null, test.getXmlEncoding()));
-->
  <literal><![CDATA[
            return lastResult;
        }

        private ComparisonResult CompareDocTypes(XmlDocumentType control,
                                                 XmlDocumentType test) {
]]></literal>
  <lastResultDef/>
  <compare type="DOCTYPE_NAME" property="Name"/>
  <compare type="DOCTYPE_PUBLIC_ID" property="PublicId"/>
  <literal><![CDATA[
            return Compare(new Comparison(ComparisonType.DOCTYPE_SYSTEM_ID,
                                          control, null, control.SystemId,
                                          test, null, test.SystemId));
        }

        private ComparisonResult
            CompareProcessingInstructions(XmlProcessingInstruction control,
                                          XmlProcessingInstruction test) {
]]></literal>
  <lastResultDef/>
  <compare type="PROCESSING_INSTRUCTION_TARGET" property="Target"/>
  <literal><![CDATA[
            return Compare(new Comparison(ComparisonType.PROCESSING_INSTRUCTION_DATA,
                                          control, null, control.Data,
                                          test, null, test.Data));
        }

        ComparisonResult CompareNodeLists(XmlNodeList control,
                                          XmlNodeList test) {
            return ComparisonResult.EQUAL;
        }

]]></literal>
</class>