<?xml version="1.0"?>
<!--
  This file is licensed to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<class ns="net.sf.xmlunit.diff" qualifiers="public sealed"
       name="DOMDifferenceEngine"
       summary="Difference engine based on DOM."
       extends="AbstractDifferenceEngine">

  <import reference="System"/>
  <import reference="System.Collections.Generic"/>
  <import reference="System.Xml"/>
  <import reference="System.Xml.Schema"/>
  <import reference="net.sf.xmlunit.util"/>

  <literal><![CDATA[

        private static readonly object DUMMY = new object();

        public override void Compare(ISource control, ISource test) {
            if (control == null) {
                throw new ArgumentNullException("control");
            }
            if (test == null) {
                throw new ArgumentNullException("test");
            }

            CompareNodes(net.sf.xmlunit.util.Convert.ToNode(control),
                         new XPathContext(),
                         net.sf.xmlunit.util.Convert.ToNode(test),
                         new XPathContext());
        }

        /// <summary>
        /// Recursively compares two XML nodes.
        /// </summary>
        /// <remarks>
        /// Performs comparisons common to all node types, the performs
        /// the node type specific comparisons and finally recures into
        /// the node's child lists.
        ///
        /// Stops as soon as any comparison returns ComparisonResult.CRITICAL.
        /// </remarks>
        internal ComparisonResult CompareNodes(XmlNode control,
                                               XPathContext controlContext,
                                               XmlNode test,
                                               XPathContext testContext) {
]]></literal>
  <lastResultDef/>
  <compare type="NODE_TYPE" property="NodeType"/>
  <compare type="NAMESPACE_URI" property="NamespaceURI"/>
  <compare type="NAMESPACE_PREFIX" property="Prefix"/>
  <literal><![CDATA[
            IEnumerable<XmlNode> controlChildren =
                Linqy.Filter(Linqy.Cast<XmlNode>(control.ChildNodes),
                             INTERESTING_NODES);
            IEnumerable<XmlNode> testChildren =
                Linqy.Filter(Linqy.Cast<XmlNode>(test.ChildNodes),
                             INTERESTING_NODES);
            if (control.NodeType != XmlNodeType.Attribute) {
]]></literal>
  <compareExpr type="CHILD_NODELIST_LENGTH"
               controlExpr="Linqy.Count(controlChildren)"
               testExpr="Linqy.Count(testChildren)"/>
  <literal><![CDATA[
             }
]]></literal>
  <compareMethod method="NodeTypeSpecificComparison"/>
  <literal><![CDATA[
            if (control.NodeType != XmlNodeType.Attribute) {
                controlContext
                    .SetChildren(Linqy.Map<XmlNode,
                                           XPathContext.INodeInfo>(controlChildren,
                                                                   TO_NODE_INFO));
                testContext
                    .SetChildren(Linqy.Map<XmlNode,
                                           XPathContext.INodeInfo>(testChildren,
                                                                   TO_NODE_INFO));
]]></literal>
  <compareMethodExpr method="CompareNodeLists"
                     controlExpr="controlChildren"
                     testExpr="testChildren"/>
  <literal><![CDATA[
            }
            return lastResult;
        }

        /// <summary>
        /// Dispatches to the node type specific comparison if one is
        /// defined for the given combination of nodes.
        /// </summary>
        private ComparisonResult NodeTypeSpecificComparison(XmlNode control,
                                                            XPathContext controlContext,
                                                            XmlNode test,
                                                            XPathContext testContext) {
            switch (control.NodeType) {
            case XmlNodeType.CDATA:
            case XmlNodeType.Comment:
            case XmlNodeType.Text:
                if (test is XmlCharacterData) {
                    return CompareCharacterData((XmlCharacterData) control,
                                                controlContext,
                                                (XmlCharacterData) test,
                                                testContext);
                }
                break;
            case XmlNodeType.Document:
                if (test is XmlDocument) {
                    return CompareDocuments((XmlDocument) control,
                                            controlContext,
                                            (XmlDocument) test, testContext);
                }
                break;
            case XmlNodeType.Element:
                if (test is XmlElement) {
                    return CompareElements((XmlElement) control,
                                           controlContext,
                                           (XmlElement) test,
                                           testContext);
                }
                break;
            case XmlNodeType.ProcessingInstruction:
                if (test is XmlProcessingInstruction) {
                    return
                        CompareProcessingInstructions((XmlProcessingInstruction) control,
                                                      controlContext,
                                                      (XmlProcessingInstruction) test,
                                                      testContext);
                }
                break;
            case XmlNodeType.DocumentType:
                if (test is XmlDocumentType) {
                    return CompareDocTypes((XmlDocumentType) control,
                                           controlContext,
                                           (XmlDocumentType) test, testContext);
                }
                break;
            case XmlNodeType.Attribute:
                if (test is XmlAttribute) {
                    return CompareAttributes((XmlAttribute) control,
                                             controlContext,
                                             (XmlAttribute) test, testContext);
                }
                break;
            }
            return ComparisonResult.EQUAL;
        }

        /// <summary>
        /// Compares textual content.
        /// </summary>
        private ComparisonResult CompareCharacterData(XmlCharacterData control,
                                                      XPathContext controlContext,
                                                      XmlCharacterData test,
                                                      XPathContext testContext) {
            return Compare(new Comparison(ComparisonType.TEXT_VALUE, control,
                                          GetXPath(controlContext),
                                          control.Data,
                                          test, GetXPath(testContext),
                                          test.Data));
        }

        private ComparisonResult CompareDocuments(XmlDocument control,
                                                  XPathContext controlContext,
                                                  XmlDocument test,
                                                  XPathContext testContext) {
            XmlDocumentType controlDt = control.DocumentType;
            XmlDocumentType testDt = test.DocumentType;
]]></literal>
  <lastResultDef/>
  <compareExpr type="HAS_DOCTYPE_DECLARATION"
               controlExpr="controlDt != null"
               testExpr="testDt != null"/>
  <literal><![CDATA[
            if (controlDt != null && testDt != null) {
]]></literal>
  <compareMethodExpr method="CompareNodes"
                     controlExpr="controlDt"
                     testExpr="testDt"/>
  <literal><![CDATA[
            }
            XmlDeclaration controlDecl = control.FirstChild as XmlDeclaration;
            XmlDeclaration testDecl = test.FirstChild as XmlDeclaration;
]]></literal>
  <compareMethodExpr method="CompareDeclarations"
                     controlExpr="controlDecl"
                     testExpr="testDecl"/>
  <literal><![CDATA[
            return lastResult;
        }

        private ComparisonResult CompareDocTypes(XmlDocumentType control,
                                                 XPathContext controlContext,
                                                 XmlDocumentType test,
                                                 XPathContext testContext) {
]]></literal>
  <lastResultDef/>
  <compare type="DOCTYPE_NAME" property="Name"/>
  <compare type="DOCTYPE_PUBLIC_ID" property="PublicId"/>
  <literal><![CDATA[
            return Compare(new Comparison(ComparisonType.DOCTYPE_SYSTEM_ID,
                                          control, GetXPath(controlContext),
                                          control.SystemId,
                                          test, GetXPath(testContext),
                                          test.SystemId));
        }

        private ComparisonResult CompareDeclarations(XmlDeclaration control,
                                                     XPathContext controlContext,
                                                     XmlDeclaration test,
                                                     XPathContext testContext) {
]]></literal>
  <lastResultDef/>
  <literal><![CDATA[
            string controlVersion =
                control == null ? "1.0" : control.Version;
            string testVersion =
                test == null ? "1.0" : test.Version;
]]></literal>
  <compareExpr type="XML_VERSION"
               controlExpr="controlVersion"
               testExpr="testVersion"/>
  <literal><![CDATA[
            string controlStandalone =
                control == null ? string.Empty : control.Standalone;
            string testStandalone =
                test == null ? string.Empty : test.Standalone;
]]></literal>
  <compareExpr type="XML_STANDALONE"
               controlExpr="controlStandalone"
               testExpr="testStandalone"/>
  <literal><![CDATA[
            string controlEncoding =
                control != null ? control.Encoding : string.Empty;
            string testEncoding = test != null ? test.Encoding : string.Empty;
            return Compare(new Comparison(ComparisonType.XML_ENCODING,
                                          control, GetXPath(controlContext),
                                          controlEncoding,
                                          test, GetXPath(testContext),
                                          testEncoding));
        }

        private ComparisonResult CompareElements(XmlElement control,
                                                 XPathContext controlContext,
                                                 XmlElement test,
                                                 XPathContext testContext) {
]]></literal>
  <lastResultDef/>
  <compare type="ELEMENT_TAG_NAME" property="Name"/>
  <literal><![CDATA[
            Attributes controlAttributes = SplitAttributes(control.Attributes);
            controlContext
                .AddAttributes(Linqy.Map<XmlAttribute,
                                         XmlQualifiedName>(controlAttributes
                                                           .RemainingAttributes,
                                                           Nodes.GetQName));
            Attributes testAttributes = SplitAttributes(test.Attributes);
            testContext
                .AddAttributes(Linqy.Map<XmlAttribute,
                                         XmlQualifiedName>(testAttributes
                                                           .RemainingAttributes,
                                                           Nodes.GetQName));
            IDictionary<XmlAttribute, object> foundTestAttributes =
                new Dictionary<XmlAttribute, object>();
]]></literal>
  <compareExpr type="ELEMENT_NUM_ATTRIBUTES"
               controlExpr="controlAttributes.RemainingAttributes.Count"
               testExpr="testAttributes.RemainingAttributes.Count"/>
  <literal><![CDATA[
            foreach (XmlAttribute controlAttr in controlAttributes.RemainingAttributes) {
                XmlAttribute testAttr =
                    FindMatchingAttr(testAttributes.RemainingAttributes,
                                     controlAttr);
                controlContext.NavigateToAttribute(Nodes.GetQName(controlAttr));
                try {
]]></literal>
  <compareExpr type="ATTR_NAME_LOOKUP"
               controlExpr="true"
               testExpr="testAttr != null"/>
  <literal><![CDATA[
                    if (testAttr != null) {
                        testContext.NavigateToAttribute(Nodes
                                                        .GetQName(testAttr));
                        try {
]]></literal>
  <compareMethodExpr method="CompareNodes"
                     controlExpr="controlAttr"
                     testExpr="testAttr"/>
  <literal><![CDATA[
                            foundTestAttributes[testAttr] = DUMMY;
                        } finally {
                            testContext.NavigateToParent();
                        }
                    }
                } finally {
                    controlContext.NavigateToParent();
                }
            }
]]></literal>
  <literal><![CDATA[
            foreach (XmlAttribute testAttr in testAttributes.RemainingAttributes) {
                testContext.NavigateToAttribute(Nodes.GetQName(testAttr));
                try {
]]></literal>
  <compareExpr type="ATTR_NAME_LOOKUP"
               controlExpr="foundTestAttributes.ContainsKey(testAttr)"
               testExpr="true"/>
  <literal><![CDATA[
                } finally {
                    testContext.NavigateToParent();
                }
            }
]]></literal>
  <compareExpr type="SCHEMA_LOCATION"
               controlExpr="controlAttributes.SchemaLocation != null ? controlAttributes.SchemaLocation.Value : null"
               testExpr="testAttributes.SchemaLocation != null ? testAttributes.SchemaLocation.Value : null"
               />
  <compareExpr type="NO_NAMESPACE_SCHEMA_LOCATION"
               controlExpr="controlAttributes.NoNamespaceSchemaLocation != null ? controlAttributes.NoNamespaceSchemaLocation.Value : null"
               testExpr="testAttributes.NoNamespaceSchemaLocation != null ? testAttributes.NoNamespaceSchemaLocation.Value : null"
               />
  <literal><![CDATA[
            return lastResult;
        }

        private ComparisonResult
            CompareProcessingInstructions(XmlProcessingInstruction control,
                                          XPathContext controlContext,
                                          XmlProcessingInstruction test,
                                          XPathContext testContext) {
]]></literal>
  <lastResultDef/>
  <compare type="PROCESSING_INSTRUCTION_TARGET" property="Target"/>
  <literal><![CDATA[
            return Compare(new Comparison(ComparisonType.PROCESSING_INSTRUCTION_DATA,
                                          control, GetXPath(controlContext),
                                          control.Data,
                                          test, GetXPath(testContext),
                                          test.Data));
        }

        private ComparisonResult CompareNodeLists(IEnumerable<XmlNode> controlSeq,
                                                  XPathContext controlContext,
                                                  IEnumerable<XmlNode> testSeq,
                                                  XPathContext testContext) {
            IList<XmlNode> controlList = new List<XmlNode>(controlSeq);
            IList<XmlNode> testList = new List<XmlNode>(testSeq);
            IDictionary<int, object> unmatchedTestIndexes =
                new SortedDictionary<int, object>();
            for (int i = 0; i < testList.Count; i++) {
                unmatchedTestIndexes.Add(i, DUMMY);
            }
]]></literal>
  <lastResultDef/>
  <literal><![CDATA[
            // if there are no children on either Node, the result is equal
            lastResult = ComparisonResult.EQUAL;
            Match lastMatch = new Match(null, -1);
            for (int i = 0; i < controlList.Count; i++) {
                Match testMatch = FindMatchingNode(controlList[i], testList,
                                                   lastMatch.Index);
                controlContext.NavigateToChild(i);
                try {
                    if (testMatch != null) {
                        XmlNode control = controlList[i];
                        XmlNode test = testMatch.Node;
                        testContext.NavigateToChild(testMatch.Index);
                        try {
]]></literal>
  <compareExpr type="CHILD_NODELIST_SEQUENCE"
               controlExpr="i"
               testExpr="testMatch.Index"
               />
  <compareMethodExpr method="CompareNodes"
                     controlExpr="control"
                     testExpr="test"/>
  <literal><![CDATA[
                            unmatchedTestIndexes.Remove(testMatch.Index);
                            lastMatch = testMatch;
                        } finally {
                            testContext.NavigateToParent();
                        }
                    } else {
                        lastResult =
                            Compare(new Comparison(ComparisonType.CHILD_LOOKUP,
                                                   controlList[i],
                                                   GetXPath(controlContext),
                                                   controlList[i],
                                                   null, null, null));
]]></literal>
 <if-return-boilerplate/>
 <literal><![CDATA[
                    }
                } finally {
                    controlContext.NavigateToParent();
                }
            }
            foreach (int i in unmatchedTestIndexes.Keys) {
                testContext.NavigateToChild(i);
                try {
                    lastResult =
                        Compare(new Comparison(ComparisonType.CHILD_LOOKUP,
                                               null, null, null,
                                               testList[i], GetXPath(testContext),
                                               testList[i]));
]]></literal>
  <if-return-boilerplate/>
  <literal><![CDATA[
                } finally {
                    testContext.NavigateToParent();
                }
            }
            return lastResult;
        }

        private ComparisonResult CompareAttributes(XmlAttribute control,
                                                   XPathContext controlContext,
                                                   XmlAttribute test,
                                                   XPathContext testContext) {
]]></literal>
  <lastResultDef/>
  <compare type="ATTR_VALUE_EXPLICITLY_SPECIFIED" property="Specified"/>
  <literal><![CDATA[
            return Compare(new Comparison(ComparisonType.ATTR_VALUE,
                                          control, GetXPath(controlContext),
                                          control.Value,
                                          test, GetXPath(testContext),
                                          test.Value));
        }

        private static Attributes SplitAttributes(XmlAttributeCollection map) {
            XmlAttribute sLoc = map.GetNamedItem("schemaLocation",
                                                 XmlSchema.InstanceNamespace)
                as XmlAttribute;
            XmlAttribute nNsLoc = map.GetNamedItem("noNamespaceSchemaLocation",
                                                   XmlSchema.InstanceNamespace)
                as XmlAttribute;
            List<XmlAttribute> rest = new List<XmlAttribute>();
            foreach (XmlAttribute a in map) {
                if (XmlSchema.InstanceNamespace != a.NamespaceURI
                    &&
                    "http://www.w3.org/2000/xmlns/" != a.NamespaceURI) {
                    rest.Add(a);
                }
            }
            return new Attributes(sLoc, nNsLoc, rest);
        }

        internal class Attributes {
            internal readonly XmlAttribute SchemaLocation;
            internal readonly XmlAttribute NoNamespaceSchemaLocation;
            internal readonly IList<XmlAttribute> RemainingAttributes;
            internal Attributes(XmlAttribute schemaLocation,
                               XmlAttribute noNamespaceSchemaLocation,
                               IList<XmlAttribute> remainingAttributes) {
                this.SchemaLocation = schemaLocation;
                this.NoNamespaceSchemaLocation = noNamespaceSchemaLocation;
                this.RemainingAttributes = remainingAttributes;
            }
        }

        private static XmlAttribute FindMatchingAttr(IList<XmlAttribute> attrs,
                                                     XmlAttribute attrToMatch) {
            bool hasNs = !string.IsNullOrEmpty(attrToMatch.NamespaceURI);
            string nsToMatch = attrToMatch.NamespaceURI;
            string nameToMatch = hasNs ? attrToMatch.LocalName
                : attrToMatch.Name;
            foreach (XmlAttribute a in attrs) {
                if (((!hasNs && string.IsNullOrEmpty(a.NamespaceURI))
                     ||
                     (hasNs && nsToMatch == a.NamespaceURI))
                    &&
                    ((hasNs && nameToMatch == a.LocalName)
                     ||
                     (!hasNs && nameToMatch == a.Name))
                   ) {
                    return a;
                }
            }
            return null;
        }

        private Match FindMatchingNode(XmlNode searchFor,
                                       IList<XmlNode> searchIn,
                                       int indexOfLastMatch) {
            int searchSize = searchIn.Count;
            for (int i = indexOfLastMatch + 1; i < searchSize; i++) {
                if (NodesMatch(searchFor, searchIn[i])) {
                    return new Match(searchIn[i], i);
                }
            }
            for (int i = 0; i < indexOfLastMatch; i++) {
                if (NodesMatch(searchFor, searchIn[i])) {
                    return new Match(searchIn[i], i);
                }
            }
            return null;
        }

        private bool NodesMatch(XmlNode n1, XmlNode n2) {
            if (n1 is XmlElement && n2 is XmlElement) {
                return ElementSelector(n1 as XmlElement, n2 as XmlElement);
            }
            ComparisonResult r =
                CompareDontFire(new Comparison(ComparisonType.NODE_TYPE,
                                               n1, null, n1.NodeType,
                                               n2, null, n2.NodeType));
            return r != ComparisonResult.CRITICAL;
        }

        internal class Match {
            internal readonly XmlNode Node;
            internal readonly int Index;
            internal Match(XmlNode match, int index) {
                Node = match;
                Index = index;
            }
        }

        private static XPathContext.INodeInfo TO_NODE_INFO(XmlNode n) {
            return new XPathContext.DOMNodeInfo(n);
        }

        private static bool INTERESTING_NODES(XmlNode n) {
            return n.NodeType != XmlNodeType.DocumentType
                && n.NodeType != XmlNodeType.XmlDeclaration;
        }
]]></literal>
</class>
