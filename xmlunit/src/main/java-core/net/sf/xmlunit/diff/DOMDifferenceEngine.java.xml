<?xml version="1.0"?>
<!--
  This file is licensed to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<class ns="net.sf.xmlunit.diff" qualifiers="public final"
       name="DOMDifferenceEngine"
       summary="Difference engine based on DOM."
       extends="AbstractDifferenceEngine">

  <import reference="javax.xml.transform.Source"/>
  <import reference="net.sf.xmlunit.util.Convert"/>
  <import reference="org.w3c.dom.Attr"/>
  <import reference="org.w3c.dom.CharacterData"/>
  <import reference="org.w3c.dom.Document"/>
  <import reference="org.w3c.dom.DocumentType"/>
  <import reference="org.w3c.dom.Element"/>
  <import reference="org.w3c.dom.NamedNodeMap"/>
  <import reference="org.w3c.dom.Node"/>
  <import reference="org.w3c.dom.NodeList"/>
  <import reference="org.w3c.dom.ProcessingInstruction"/>

  <literal><![CDATA[
    public void compare(Source control, Source test) {
        if (control == null) {
            throw new IllegalArgumentException("control must not be null");
        }
        if (test == null) {
            throw new IllegalArgumentException("test must not be null");
        }
        compareNodes(Convert.toNode(control), Convert.toNode(test));
    }

    /**
     * Recursively compares two XML nodes.
     *
     * <p>Performs comparisons common to all node types, the performs
     * the node type specific comparisons and finally recures into
     * the node's child lists.</p>
     *
     * <p>Stops as soon as any comparison returns
     * ComparisonResult.CRITICAL.</p>
     *
     * <p>package private to support tests.</p>
     */
    ComparisonResult compareNodes(Node control, Node test) {
]]></literal>
  <lastResultDef/>
  <compare type="NODE_TYPE" property="getNodeType()"/>
  <compare type="NAMESPACE_URI" property="getNamespaceURI()"/>
  <compare type="NAMESPACE_PREFIX" property="getPrefix()"/>
  <literal><![CDATA[
        NodeList controlChildren = control.getChildNodes();
        NodeList testChildren = test.getChildNodes();
]]></literal>
  <compareExpr type="CHILD_NODELIST_LENGTH"
               controlExpr="controlChildren.getLength()"
               testExpr="testChildren.getLength()"/>
  <compareMethod method="nodeTypeSpecificComparison"/>
  <literal><![CDATA[
        return compareNodeLists(controlChildren, testChildren);
    }

    /**
     * Dispatches to the node type specific comparison if one is
     * defined for the given combination of nodes.
     *
     * <p>package private to support tests.</p>
     */
    private ComparisonResult nodeTypeSpecificComparison(Node control,
                                                        Node test) {
        switch (control.getNodeType()) {
        case Node.CDATA_SECTION_NODE:
        case Node.COMMENT_NODE:
        case Node.TEXT_NODE:
            if (test instanceof CharacterData) {
                return compareCharacterData((CharacterData) control,
                                            (CharacterData) test);
            }
            break;
        case Node.DOCUMENT_NODE:
            if (test instanceof Document) {
                return compareDocuments((Document) control,
                                        (Document) test);
            }
            break;
        case Node.ELEMENT_NODE:
            if (test instanceof Element) {
                return compareElements((Element) control,
                                       (Element) test);
            }
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            if (test instanceof ProcessingInstruction) {
                return
                    compareProcessingInstructions((ProcessingInstruction) control,
                                                  (ProcessingInstruction) test);
            }
            break;
        case Node.DOCUMENT_TYPE_NODE:
            if (test instanceof DocumentType) {
                return compareDocTypes((DocumentType) control,
                                       (DocumentType) test);
            }
            break;
        case Node.ATTRIBUTE_NODE:
            if (test instanceof Attr) {
                return compareAttributes((Attr) control,
                                         (Attr) test);
            }
            break;
        }
        return ComparisonResult.EQUAL;
    }

    /**
     * Compares textual content.
     */
    private ComparisonResult compareCharacterData(CharacterData control,
                                                  CharacterData test) {
        return compare(new Comparison(ComparisonType.TEXT_VALUE, control,
                                      null, control.getData(),
                                      test, null, test.getData()));
    }

    private ComparisonResult compareDocuments(Document control,
                                              Document test) {
        DocumentType controlDt = control.getDoctype();
        DocumentType testDt = test.getDoctype();
]]></literal>
  <lastResultDef/>
  <compareExpr type="HAS_DOCTYPE_DECLARATION"
               controlExpr="Boolean.valueOf(controlDt != null)"
               testExpr="Boolean.valueOf(testDt != null)"/>
  <literal><![CDATA[
        if (controlDt != null && testDt != null) {
]]></literal>
  <compareMethodExpr method="compareNodes"
                     controlExpr="controlDt"
                     testExpr="testDt"/>
  <literal><![CDATA[
        }
]]></literal>
  <compare type="XML_VERSION" property="getXmlVersion()"/>
  <compare type="XML_STANDALONE" property="getXmlStandalone()"/>
  <literal><![CDATA[
        return compare(new Comparison(ComparisonType.XML_ENCODING,
                                      control, null, control.getXmlEncoding(),
                                      test, null, test.getXmlEncoding()));
    }

    private ComparisonResult compareDocTypes(DocumentType control,
                                             DocumentType test) {
]]></literal>
  <lastResultDef/>
  <compare type="DOCTYPE_NAME" property="getName()"/>
  <compare type="DOCTYPE_PUBLIC_ID" property="getPublicId()"/>
  <literal><![CDATA[
        return compare(new Comparison(ComparisonType.DOCTYPE_SYSTEM_ID,
                                      control, null, control.getSystemId(),
                                      test, null, test.getSystemId()));
    }

    private ComparisonResult compareElements(Element control,
                                             Element test) {
]]></literal>
  <lastResultDef/>
  <compare type="ELEMENT_TAG_NAME" property="getTagName()"/>
  <literal><![CDATA[
        NamedNodeMap controlAttributes = control.getAttributes();
        NamedNodeMap testAttributes = test.getAttributes();
        final int controlAttrLen = controlAttributes.getLength();
        final int testAttrLen = testAttributes.getLength();
]]></literal>
  <compareExpr type="ELEMENT_NUM_ATTRIBUTES"
               controlExpr="controlAttrLen"
               testExpr="testAttrLen"/>
  <literal><![CDATA[
        for (int i = 0; i < controlAttrLen; i++) {
            final Attr controlAttr = (Attr) controlAttributes.item(i);
            final Attr testAttr = findMatchingAttr(testAttributes, controlAttr);
]]></literal>
  <compareExpr type="ATTR_NAME_LOOKUP"
               controlExpr="Boolean.TRUE"
               testExpr="Boolean.valueOf(testAttr != null)"/>
  <literal><![CDATA[
        }
]]></literal>
  <literal><![CDATA[
        for (int i = 0; i < testAttrLen; i++) {
            final Attr testAttr = (Attr) testAttributes.item(i);
            final Attr controlAttr = findMatchingAttr(controlAttributes,
                                                      testAttr);
]]></literal>
  <compareExpr type="ATTR_NAME_LOOKUP"
               controlExpr="Boolean.valueOf(controlAttr != null)"
               testExpr="Boolean.TRUE"/>
  <literal><![CDATA[
        }
]]></literal>
  <literal><![CDATA[
        for (int i = 0; i < controlAttrLen; i++) {
            final Attr controlAttr = (Attr) controlAttributes.item(i);
            final Attr testAttr = findMatchingAttr(testAttributes, controlAttr);
            if (testAttr != null) {
]]></literal>
  <compareMethodExpr method="compareNodes"
                     controlExpr="controlAttr"
                     testExpr="testAttr"/>
  <literal><![CDATA[
            }
        }
]]></literal>
  <literal><![CDATA[
        return lastResult;
    }

    private ComparisonResult
        compareProcessingInstructions(ProcessingInstruction control,
                                      ProcessingInstruction test) {
]]></literal>
  <lastResultDef/>
  <compare type="PROCESSING_INSTRUCTION_TARGET" property="getTarget()"/>
  <literal><![CDATA[
        return compare(new Comparison(ComparisonType.PROCESSING_INSTRUCTION_DATA,
                                      control, null, control.getData(),
                                      test, null, test.getData()));
    }

    private ComparisonResult compareNodeLists(NodeList control, NodeList test) {
        return ComparisonResult.EQUAL;
    }

    private ComparisonResult compareAttributes(Attr control, Attr test) {
]]></literal>
  <lastResultDef/>
  <compare type="ATTR_VALUE_EXPLICITLY_SPECIFIED" property="getSpecified()"/>
  <literal><![CDATA[
        return compare(new Comparison(ComparisonType.ATTR_VALUE,
                                      control, null, control.getValue(),
                                      test, null, test.getValue()));
    }

    private static Attr findMatchingAttr(NamedNodeMap map, Attr attrToMatch) {
        if (attrToMatch.getNamespaceURI() == null) {
            return (Attr) map.getNamedItem(attrToMatch.getName());
        } else {
            return (Attr) map.getNamedItemNS(attrToMatch.getNamespaceURI(),
                                             attrToMatch.getLocalName());
        }
    }

]]></literal>
</class>